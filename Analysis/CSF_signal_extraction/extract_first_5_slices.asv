%% === Configuration ===
main_dir = '/Users/Richard/Masterabeit_local/SNORE_MRI_data_dev_out';
output_dir = '/Users/Richard/Masterabeit_local/SNORE_Analysis/Data'
test_mode = true;  % Set to false to run all participants
num_slices = 20;

if test_mode
    participant_ids = {'7'};  % Only process participant 7
else
    % Get all subfolders (excluding hidden/system dirs)
    dirs = dir(main_dir);
    participant_ids = {dirs([dirs.isdir] & ~startsWith({dirs.name}, '.')).name};
end


%% === Extract signal for the first n Slices ===

% === Initialize result structure ===
csf_dataset = struct();

for i = 1:length(participant_ids)
    participant_id = participant_ids{i}; %index first value of participant ids
    participant_path = fullfile(main_dir, participant_id);

    try
        % === Identify functional and mask files ===
        func_folder = fullfile(participant_path, 'func_merged');
        func_file = dir(fullfile(func_folder, 'merged_*.nii'));

        mask_folder = fullfile(participant_path, 'CSF_mask');
        mask_file = dir(fullfile(mask_folder, 'c3_pruned*.nii'));

        if isempty(func_file) || isempty(mask_file)
            fprintf('Skipping participant %s: Missing mask or functional file.\n', participant_id);
            continue;
        end

        img_file = fullfile(func_folder, func_file(1).name);
        mask_file_path = fullfile(mask_folder, mask_file(1).name);

        % === Load image and mask ===
        V_img = spm_vol(img_file);
        V_mask = spm_vol(mask_file_path);
        mask_data = spm_read_vols(V_mask);
        n_timepoints = numel(V_img);

        % === Initialize slice struct ===
        slice_data_struct = struct();

        for slice_idx = 1:num_slices
            mask_slice = mask_data(:,:,slice_idx);
            csf_voxel_idx = find(mask_slice);

            if isempty(csf_voxel_idx)
                fprintf('Participant %s - Slice %d: No CSF voxels\n', participant_id, slice_idx);
                slice_data_struct(slice_idx).signals = [];
                continue;
            end

            % Extract signal across time
            csf_signals = zeros(length(csf_voxel_idx), n_timepoints);

            for t = 1:n_timepoints
                volume_data = spm_read_vols(V_img(t));
                slice_data = volume_data(:,:,slice_idx);
                voxel_values = slice_data(csf_voxel_idx);
                voxel_values(voxel_values == 0) = NaN;
                csf_signals(:,t) = voxel_values;
            end

            % Store per slice
            slice_data_struct(slice_idx).signals = csf_signals;
        end

        % === Store in result structure ===
        csf_dataset.(sprintf('p%s', participant_id)) = slice_data_struct;
        fprintf('Extracted CSF signals for participant %s\n', participant_id);

    catch ME
        fprintf('Error with participant %s: %s\n', participant_id, ME.message);
    end
end

%% ====== Save data ========


