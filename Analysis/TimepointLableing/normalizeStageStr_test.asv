%% Check for labeling
normalizeStageStr(["NREM1","NREM2","NREM3","REM","Wake","Unknown","NREM2 (Unknown)","unknown nrem2","nrem2unknown"])
% Expected => "N1","N2","N3","R","W","NA","NA","NA","NA"

function out = normalizeStageStr(in)
    % Map to W / N1 / N2 / N3 / R / NA.
    % Robust to: NREM1/2/3, "Unknown", "Wake", "REM", "NREM2 (Unknown)", etc.
    s = string(in);
    out = strings(size(s));

    % Lowercase + strip non-alphanumerics for matching
    canon = lower(regexprep(strtrim(s), '[^a-z0-9]+', ''));

    for i = 1:numel(canon)
        ci = canon(i);

        if ci == "" || ismissing(s(i))
            out(i) = "NA"; continue
        end

        % -------- Unknown FIRST (short-circuits mixed labels) --------
        if contains(ci, "unknown") || ci == "unk" || ci == "unscored" ...
                || ci == "undefined" || ci == "undetermined" || ci == "na" || ci == "nan"
            out(i) = "NA"; continue
        end

        % -------- Wake --------
        if ci == "w" || ci == "wake" || ci == "awake" || ci == "wakefulness"
            out(i) = "W"; continue
        end

        % -------- Exact REM only (avoid matching 'nrem') --------
        if ci == "rem" || ci == "remstage"
            out(i) = "R"; continue
        end

        % -------- NREM (explicit forms) --------
        if ci == "n1" || ci == "stage1" || ci == "s1" || ci == "nrem1" || ci == "nonrem1" || ci == "nr1"
            out(i) = "N1"; continue
        end
        if ci == "n2" || ci == "stage2" || ci == "s2" || ci == "nrem2" || ci == "nonrem2" || ci == "nr2"
            out(i) = "N2"; continue
        end
        if ci == "n3" || ci == "stage3" || ci == "s3" || ci == "sws" || ci == "nrem3" || ci == "nonrem3" || ci == "nr3"
            out(i) = "N3"; continue
        end

        % -------- NREM + digit (e.g., "nrem2unknown" won't match due to 'unknown' handled above) --------
        tok = regexp(ci, '^nrem([123])$', 'tokens', 'once');
        if ~isempty(tok)
            out(i) = "N" + tok{1}; continue
        end

        % -------- Fallback: keep readable original --------
        out(i) = upper(s(i));
    end
end

%% my own solution
function out = normalizeStageStr2(in)
    % Map to W / N1 / N2 / N3 / R / NA.
    % Robust to: NREM1/2/3, "Unknown", "Wake", "REM", "NREM2 (Unknown)", etc.
    s = string(in);
    out = strings(size(s));

    % Lowercase + strip non-alphanumerics for matching
    canon = lower(regexprep(strtrim(s), '[^a-z0-9]+', ''));

    for i = 1:numel(canon)
        ci = canon(i);

        if ci == "" || ismissing(s(i))
            out(i) = "NA"; continue
        end

        % -------- Unknown FIRST (short-circuits mixed labels) --------
        if ci == "Unkown" 
           out(i) = "Unkown"; continue
        end

        % -------- Wake --------
        if ci == "Wake"
            out(i) = "Wake"; continue
        end

        % -------- Exact REM only (avoid matching 'nrem') --------
        if ci == "REM" || ci == "rem" || ci == "Rem"
            out(i) = "REM"; continue
        end

        % -------- NREM (explicit forms) --------
        if ci == "NREM1" || ci == "stage1" || ci == "s1" || ci == "nrem1" || ci == "nonrem1" || ci == "nr1"
            out(i) = "NREM1"; continue
        end
        if ci == "NREM2" || ci == "stage2" || ci == "s2" || ci == "nrem2" || ci == "nonrem2" || ci == "nr2"
            out(i) = "NREM2"; continue
        end
        if ci == "NREM3" || ci == "stage3" || ci == "s3" || ci == "sws" || ci == "nrem3" || ci == "nonrem3" || ci == "nr3"
            out(i) = "NREM3"; continue
        end
    end
end


%Test cases
normalizeStageStr(['Unknown','NREM1','NREM2','NREM3','Wake'])
